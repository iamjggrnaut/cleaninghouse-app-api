/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã –ø–ª–∞—Ç–µ–∂–µ–π
 * –ó–∞–ø—É—Å–∫: node test-payment-system.js
 */

const axios = require('axios');

const API_BASE_URL = 'https://app.cleaninghouse-premium.ru/api';
// const API_BASE_URL = 'http://localhost:3000/api';

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
const testData = {
  customer: {
    email: 'test-customer@example.com',
    password: 'test123456',
    fullName: '–¢–µ—Å—Ç–æ–≤—ã–π –ó–∞–∫–∞–∑—á–∏–∫',
    phone: '+79000000001'
  },
  contractor: {
    email: 'test-contractor@example.com', 
    password: 'test123456',
    fullName: '–¢–µ—Å—Ç–æ–≤—ã–π –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å',
    phone: '+79000000002'
  }
};

let customerToken = '';
let contractorToken = '';
let personalizedOrderId = '';
let invitationId = '';

async function testPaymentSystem() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø–ª–∞—Ç–µ–∂–µ–π...\n');

  try {
    // 1. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑—á–∏–∫–∞
    console.log('1Ô∏è‚É£ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑—á–∏–∫–∞...');
    await registerCustomer();
    
    // 2. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
    console.log('2Ô∏è‚É£ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è...');
    await registerContractor();
    
    // 3. –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
    console.log('3Ô∏è‚É£ –°–æ–∑–¥–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑...');
    await createPersonalizedOrder();
    
    // 4. –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
    console.log('4Ô∏è‚É£ –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ...');
    await createInvitation();
    
    // 5. –ü—Ä–∏–Ω—è—Ç–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
    console.log('5Ô∏è‚É£ –ü—Ä–∏–Ω–∏–º–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ...');
    await acceptInvitation();
    
    // 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
    console.log('6Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞...');
    await checkPaymentStatus();
    
    // 7. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º
    console.log('7Ô∏è‚É£ –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–∫–∞–∑ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º...');
    await completeOrder();
    
    // 8. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –∑–∞–∫–∞–∑—á–∏–∫–æ–º
    console.log('8Ô∏è‚É£ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –∑–∞–∫–∞–∑—á–∏–∫–æ–º...');
    await confirmPayment();
    
    console.log('‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø–ª–∞—Ç–µ–∂–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.response?.data || error.message);
  }
}

async function registerCustomer() {
  try {
    const response = await axios.post(`${API_BASE_URL}/auth/register`, {
      fullName: testData.customer.fullName,
      phone: testData.customer.phone,
      email: testData.customer.email,
      password: testData.customer.password,
      role: 'customer'
    });
    
    if (response.data.success) {
      customerToken = response.data.data.accessToken;
      console.log('‚úÖ –ó–∞–∫–∞–∑—á–∏–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');
    } else {
      throw new Error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–∫–∞–∑—á–∏–∫–∞');
    }
  } catch (error) {
    if (error.response?.status === 400 && error.response.data.message.includes('—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')) {
      console.log('‚ö†Ô∏è –ó–∞–∫–∞–∑—á–∏–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏...');
      await loginCustomer();
    } else {
      throw error;
    }
  }
}

async function loginCustomer() {
  const response = await axios.post(`${API_BASE_URL}/auth/login`, {
    email: testData.customer.email,
    password: testData.customer.password
  });
  
  if (response.data.success) {
    customerToken = response.data.data.accessToken;
    console.log('‚úÖ –ó–∞–∫–∞–∑—á–∏–∫ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
  } else {
    throw new Error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∑–∞–∫–∞–∑—á–∏–∫–∞');
  }
}

async function registerContractor() {
  try {
    const response = await axios.post(`${API_BASE_URL}/auth/register`, {
      fullName: testData.contractor.fullName,
      phone: testData.contractor.phone,
      email: testData.contractor.email,
      password: testData.contractor.password,
      role: 'contractor'
    });
    
    if (response.data.success) {
      contractorToken = response.data.data.accessToken;
      console.log('‚úÖ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');
    } else {
      throw new Error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è');
    }
  } catch (error) {
    if (error.response?.status === 400 && error.response.data.message.includes('—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')) {
      console.log('‚ö†Ô∏è –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏...');
      await loginContractor();
    } else {
      throw error;
    }
  }
}

async function loginContractor() {
  const response = await axios.post(`${API_BASE_URL}/auth/login`, {
    email: testData.contractor.email,
    password: testData.contractor.password
  });
  
  if (response.data.success) {
    contractorToken = response.data.data.accessToken;
    console.log('‚úÖ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
  } else {
    throw new Error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è');
  }
}

async function createPersonalizedOrder() {
  const response = await axios.post(`${API_BASE_URL}/personalized-orders`, {
    contractorId: 'test-contractor-id', // –í —Ä–µ–∞–ª—å–Ω–æ–º —Ç–µ—Å—Ç–µ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å ID –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
    title: '–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑ –Ω–∞ —É–±–æ—Ä–∫—É',
    description: '–ù—É–∂–Ω–æ —É–±—Ä–∞—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É –≤ 2 –∫–æ–º–Ω–∞—Ç—ã',
    budget: 5000,
    fullAddress: '–ú–æ—Å–∫–≤–∞, —É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, –¥. 1, –∫–≤. 1',
    customerPhone: testData.customer.phone,
    scheduledDate: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),
    specialInstructions: '–û—Å–æ–±—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —É–±–æ—Ä–∫–µ',
    estimatedDuration: 3
  }, {
    headers: { Authorization: `Bearer ${customerToken}` }
  });
  
  if (response.data.success) {
    personalizedOrderId = response.data.data.id;
    console.log('‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω:', personalizedOrderId);
  } else {
    throw new Error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞');
  }
}

async function createInvitation() {
  const response = await axios.post(`${API_BASE_URL}/invitations`, {
    contractorId: 'test-contractor-id', // –í —Ä–µ–∞–ª—å–Ω–æ–º —Ç–µ—Å—Ç–µ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å ID –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
    personalizedOrderId: personalizedOrderId,
    message: '–ü—Ä–∏–≥–ª–∞—à–∞—é –≤–∞—Å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —ç—Ç–æ—Ç –∑–∞–∫–∞–∑'
  }, {
    headers: { Authorization: `Bearer ${customerToken}` }
  });
  
  if (response.data.success) {
    invitationId = response.data.data.id;
    console.log('‚úÖ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ:', invitationId);
  } else {
    throw new Error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è');
  }
}

async function acceptInvitation() {
  const response = await axios.put(`${API_BASE_URL}/invitations/${invitationId}/accept`, {}, {
    headers: { Authorization: `Bearer ${contractorToken}` }
  });
  
  if (response.data.success) {
    console.log('‚úÖ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ');
  } else {
    throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è');
  }
}

async function checkPaymentStatus() {
  const response = await axios.get(`${API_BASE_URL}/payment-holds/customer`, {
    headers: { Authorization: `Bearer ${customerToken}` }
  });
  
  if (response.data.success) {
    console.log('‚úÖ –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ–ª—É—á–µ–Ω:', response.data.data.length, '–∑–∞–ø–∏—Å–µ–π');
  } else {
    throw new Error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–µ–π');
  }
}

async function completeOrder() {
  const response = await axios.put(`${API_BASE_URL}/personalized-orders/${personalizedOrderId}/complete`, {}, {
    headers: { Authorization: `Bearer ${contractorToken}` }
  });
  
  if (response.data.success) {
    console.log('‚úÖ –ó–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º');
  } else {
    throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞');
  }
}

async function confirmPayment() {
  const response = await axios.put(`${API_BASE_URL}/personalized-orders/${personalizedOrderId}/confirm`, {}, {
    headers: { Authorization: `Bearer ${customerToken}` }
  });
  
  if (response.data.success) {
    console.log('‚úÖ –ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∑–∞–∫–∞–∑—á–∏–∫–æ–º');
  } else {
    throw new Error('–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞');
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
testPaymentSystem();
