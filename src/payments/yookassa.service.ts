import { Injectable } from '@nestjs/common';
import { YooCheckout, ICreatePayment, ICapturePayment, Payment as IPayment } from '@a2seven/yoo-checkout';

@Injectable()
export class YooKassaService {
  private checkout: YooCheckout;

  constructor() {
    const shopId = process.env.YOOKASSA_SHOP_ID || '1187292';
    const secretKey = process.env.YOOKASSA_SECRET_KEY || 'test_KW0GVWw98vJfPNqJXkSY7vmup_j-Let-UXPr6RQZHdk';

    this.checkout = new YooCheckout({
      shopId,
      secretKey,
    });

    console.log(`üí≥ YooKassa initialized (Shop ID: ${shopId}, Mode: ${shopId.includes('test') || secretKey.includes('test') ? 'TEST' : 'PRODUCTION'})`);
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂ (hold - —Ö–æ–ª–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤)
   * @param amount - —Å—É–º–º–∞ –≤ —Ä—É–±–ª—è—Ö
   * @param description - –æ–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
   * @param orderId - ID –∑–∞–∫–∞–∑–∞ (–¥–ª—è metadata)
   * @param returnUrl - URL –¥–ª—è —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
   */
  async createPayment(
    amount: number,
    description: string,
    orderId: string,
    returnUrl?: string,
  ): Promise<IPayment> {
    const idempotenceKey = `${orderId}-${Date.now()}`;

    const createPayload: ICreatePayment = {
      amount: {
        value: amount.toFixed(2),
        currency: 'RUB',
      },
      capture: false, // –•–æ–ª–¥–∏—Ä–æ–≤–∞–Ω–∏–µ (–Ω–µ —Å–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–∞–∑—É)
      confirmation: {
        type: 'redirect',
        return_url: returnUrl || 'https://cleaninghouse-premium.ru/payment/success',
      },
      description,
      metadata: {
        orderId,
      },
    };

    try {
      const payment = await this.checkout.createPayment(createPayload, idempotenceKey);
      console.log(`üí≥ YooKassa payment created: ${payment.id} (${amount}‚ÇΩ, hold)`);
      return payment;
    } catch (error) {
      console.error('üí≥ YooKassa createPayment error:', error);
      throw error;
    }
  }

  /**
   * –°–ø–∏—Å–∞—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ (capture - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ö–æ–ª–¥–∞)
   * @param paymentId - ID –ø–ª–∞—Ç–µ–∂–∞ –≤ YooKassa
   * @param amount - —Å—É–º–º–∞ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è (–º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ —Ö–æ–ª–¥–∞)
   */
  async capturePayment(paymentId: string, amount?: number): Promise<IPayment> {
    const idempotenceKey = `capture-${paymentId}-${Date.now()}`;

    const capturePayload: ICapturePayment = amount
      ? {
          amount: {
            value: amount.toFixed(2),
            currency: 'RUB',
          },
        }
      : {};

    try {
      const payment = await this.checkout.capturePayment(paymentId, capturePayload, idempotenceKey);
      console.log(`üí≥ YooKassa payment captured: ${paymentId} (${payment.amount.value}‚ÇΩ)`);
      return payment;
    } catch (error) {
      console.error('üí≥ YooKassa capturePayment error:', error);
      throw error;
    }
  }

  /**
   * –û—Ç–º–µ–Ω–∏—Ç—å –ø–ª–∞—Ç–µ–∂ (cancel - –æ—Ç–º–µ–Ω–∞ —Ö–æ–ª–¥–∞)
   * @param paymentId - ID –ø–ª–∞—Ç–µ–∂–∞ –≤ YooKassa
   */
  async cancelPayment(paymentId: string, idempotenceKey?: string): Promise<IPayment> {
    const key = idempotenceKey || `cancel-${paymentId}-${Date.now()}`;

    try {
      const payment = await this.checkout.cancelPayment(paymentId, key);
      console.log(`üí≥ YooKassa payment cancelled: ${paymentId}`);
      return payment;
    } catch (error) {
      console.error('üí≥ YooKassa cancelPayment error:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
   * @param paymentId - ID –ø–ª–∞—Ç–µ–∂–∞ –≤ YooKassa
   */
  async getPayment(paymentId: string): Promise<IPayment> {
    try {
      const payment = await this.checkout.getPayment(paymentId);
      return payment;
    } catch (error) {
      console.error('üí≥ YooKassa getPayment error:', error);
      throw error;
    }
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –≤—ã–ø–ª–∞—Ç—É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é (SBP –∏–ª–∏ –Ω–∞ –∫–∞—Ä—Ç—É)
   * @param amount - —Å—É–º–º–∞ –≤—ã–ø–ª–∞—Ç—ã
   * @param payoutToken - —Ç–æ–∫–µ–Ω –≤—ã–ø–ª–∞—Ç—ã (–∫–∞—Ä—Ç–∞/—Å—á–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è)
   * @param description - –æ–ø–∏—Å–∞–Ω–∏–µ –≤—ã–ø–ª–∞—Ç—ã
   */
  async createPayout(
    amount: number,
    payoutToken: string,
    description: string,
  ): Promise<any> {
    const idempotenceKey = `payout-${Date.now()}`;

    const payoutPayload = {
      amount: {
        value: amount.toFixed(2),
        currency: 'RUB',
      },
      payout_destination_data: {
        type: 'bank_card',
        card: {
          number: payoutToken, // –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π payment_method_id
        },
      },
      description,
      metadata: {
        type: 'contractor_payout',
      },
    };

    try {
      // –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –¥–ª—è –≤—ã–ø–ª–∞—Ç –Ω—É–∂–µ–Ω –æ—Ç–¥–µ–ª—å–Ω—ã–π API endpoint
      // –í SDK @a2seven/yoo-checkout –≤—ã–ø–ª–∞—Ç—ã –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π HTTP –∑–∞–ø—Ä–æ—Å –∫ API YooKassa
      console.log(`üí∏ YooKassa payout request: ${amount}‚ÇΩ to ${payoutToken}`);
      // TODO: Implement direct API call for payouts
      return { success: true, amount, payoutToken };
    } catch (error) {
      console.error('üí∏ YooKassa createPayout error:', error);
      throw error;
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–ª–∞—Ç–µ–∂–Ω—ã–π –º–µ—Ç–æ–¥ (–∫–∞—Ä—Ç—É)
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç payment_method_id –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π
   */
  async savePaymentMethod(
    customerId: string,
    paymentMethodId: string,
  ): Promise<any> {
    // YooKassa –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–∞—Ä—Ç—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –ø–ª–∞—Ç–µ–∂–µ
    // –ó–¥–µ—Å—å –º—ã –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
    return {
      paymentMethodId,
      customerId,
      savedAt: new Date(),
    };
  }
}

