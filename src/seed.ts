import { DataSource } from 'typeorm';
import { User, UserRole } from './entities/user.entity';
import { Order, OrderStatus } from './entities/order.entity';
import * as bcrypt from 'bcryptjs';

async function seed() {
  const dataSource = new DataSource({
    type: 'postgres',
    host: process.env.DB_HOST || 'localhost',
    port: parseInt(process.env.DB_PORT || '5432', 10),
    username: process.env.DB_USER || 'postgres',
    password: process.env.DB_PASSWORD || 'React2022',
    database: process.env.DB_NAME || 'cleaninghouse',
    entities: [User, Order],
    synchronize: false,
  });

  await dataSource.initialize();
  console.log('‚úÖ Database connected');

  const userRepo = dataSource.getRepository(User);
  const orderRepo = dataSource.getRepository(Order);

  // –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü (—É—á–∏—Ç—ã–≤–∞–µ–º FK)
  await orderRepo.clear();
  await userRepo.query('TRUNCATE TABLE "users" RESTART IDENTITY CASCADE');
  console.log('üóëÔ∏è  Tables cleared');

  // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  const customer = userRepo.create({
    role: UserRole.CUSTOMER,
    fullName: '–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤',
    phone: '+79000000001',
    email: 'ivan@example.com',
    city: '–ú–æ—Å–∫–≤–∞',
    passwordHash: await bcrypt.hash('TestCustomer123!', 10),
    rating: 4.8,
    reviewsCount: 15,
    ordersCompleted: 12,
  });

  const contractor = userRepo.create({
    role: UserRole.CONTRACTOR,
    fullName: '–ú–∞—Ä–∏—è –ö—É—Ü–µ–Ω–∫–æ',
    phone: '+79000000002',
    email: 'maria@example.com',
    city: '–ú–æ—Å–∫–≤–∞',
    passwordHash: await bcrypt.hash('TestContractor123!', 10),
    rating: 4.9,
    reviewsCount: 45,
    ordersCompleted: 114,
  });

  await userRepo.save([customer, contractor]);
  console.log('üë§ Users created');

  // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤
  const orders = [
    orderRepo.create({
      status: OrderStatus.OPEN,
      customer,
      title: '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∞—è —É–±–æ—Ä–∫–∞',
      description: '–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∞—è —É–±–æ—Ä–∫–∞ 2-–∫–æ–º–Ω–∞—Ç–Ω–æ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã. –í–ª–∞–∂–Ω–∞—è —É–±–æ—Ä–∫–∞, –ø—ã–ª–µ—Å–æ—Å, –º—ã—Ç—å–µ –ø–æ–ª–æ–≤.',
      services: ['cleaning'],
      photos: ['https://images.unsplash.com/photo-1505692794403-34d4982b7f81?w=1200'],
      city: '–ú–æ—Å–∫–≤–∞',
      address: '—É–ª. –¢–≤–µ—Ä—Å–∫–∞—è, –¥. 10',
      scheduledDate: '2024-10-16',
      scheduledTime: '14:00',
      estimatedDuration: 3,
      budget: 4800,
    }),
    orderRepo.create({
      status: OrderStatus.ACTIVE,
      customer,
      contractor,
      title: '–ì–µ–Ω–µ—Ä–∞–ª—å–Ω–∞—è —É–±–æ—Ä–∫–∞',
      description: '–ì–µ–Ω–µ—Ä–∞–ª—å–Ω–∞—è —É–±–æ—Ä–∫–∞ –ø–æ—Å–ª–µ —Ä–µ–º–æ–Ω—Ç–∞. –ù—É–∂–Ω–æ –≤—ã–º—ã—Ç—å –æ–∫–Ω–∞, –ø–æ–ª—ã, —É–±—Ä–∞—Ç—å —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—É—é –ø—ã–ª—å.',
      services: ['deep_cleaning', 'windows'],
      photos: [],
      city: '–ú–æ—Å–∫–≤–∞',
      address: '–ø—Ä. –ú–∏—Ä–∞, –¥. 50',
      scheduledDate: '2024-10-14',
      scheduledTime: '10:00',
      estimatedDuration: 5,
      budget: 8900,
      advancePaid: 2670,
      totalPaid: 2670,
    }),
    orderRepo.create({
      status: OrderStatus.OPEN,
      customer,
      title: '–ú—ã—Ç—å–µ –æ–∫–æ–Ω',
      description: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–º—ã—Ç—å –æ–∫–Ω–∞ –≤ 3-–∫–æ–º–Ω–∞—Ç–Ω–æ–π –∫–≤–∞—Ä—Ç–∏—Ä–µ (6 –æ–∫–æ–Ω).',
      services: ['windows'],
      photos: [],
      city: '–ú–æ—Å–∫–≤–∞',
      address: '—É–ª. –õ–µ–Ω–∏–Ω–∞, –¥. 25',
      scheduledDate: '2024-10-18',
      scheduledTime: '12:00',
      estimatedDuration: 2,
      budget: 3500,
    }),
  ];

  await orderRepo.save(orders);
  console.log('üì¶ Orders created');

  await dataSource.destroy();
  console.log('‚úÖ Seed completed successfully!');
  console.log('\nüì± Test accounts:');
  console.log('Customer: +79000000001 / TestCustomer123!');
  console.log('Contractor: +79000000002 / TestContractor123!');
}

seed().catch(console.error);

