import {
  Controller,
  Get,
  Post,
  Body,
  Param,
  UseGuards,
  Req,
} from '@nestjs/common';
import { OrderResponsesService } from './order-responses.service';
import { JwtAuthGuard } from '../auth/jwt.guard';

@Controller('order-responses')
@UseGuards(JwtAuthGuard)
export class OrderResponsesController {
  constructor(
    private readonly orderResponsesService: OrderResponsesService,
  ) {}

  // –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –æ—Ç–∫–ª–∏–∫–∞–µ—Ç—Å—è –Ω–∞ –∑–∞–∫–∞–∑
  @Post()
  async createResponse(@Req() req: any, @Body() body: any) {
    const contractorId = req.user.userId;
    console.log('üîç OrderResponsesController.createResponse: contractorId:', contractorId);
    console.log('üîç OrderResponsesController.createResponse: body:', body);
    
    const response = await this.orderResponsesService.createResponse({
      ...body,
      contractorId,
    });
    
    console.log('üîç OrderResponsesController.createResponse: response created:', response.id);
    return { success: true, data: response };
  }

  // –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–∫–ª–∏–∫–∏ –Ω–∞ –∑–∞–∫–∞–∑ (–¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞)
  @Get('order/:orderId')
  async getResponsesByOrder(@Param('orderId') orderId: string) {
    const responses = await this.orderResponsesService.getResponsesByOrder(
      orderId,
    );
    return { success: true, data: responses };
  }

  // –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–∫–ª–∏–∫–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
  @Get('my-responses')
  async getMyResponses(@Req() req: any) {
    const contractorId = req.user.userId;
    console.log('üîç OrderResponsesController.getMyResponses: contractorId:', contractorId);
    
    const responses = await this.orderResponsesService.getResponsesByContractor(
      contractorId,
    );
    
    console.log('üîç OrderResponsesController.getMyResponses: responses found:', responses.length);
    console.log('üîç OrderResponsesController.getMyResponses: responses:', responses.map(r => ({
      id: r.id,
      orderId: r.orderId,
      status: r.status,
      orderTitle: r.order?.title
    })));
    
    return { success: true, data: responses };
  }

  // –ö–ª–∏–µ–Ω—Ç –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ—Ç–∫–ª–∏–∫
  @Post(':id/accept')
  async acceptResponse(@Req() req: any, @Param('id') id: string) {
    const customerId = req.user.userId;
    const order = await this.orderResponsesService.acceptResponse(
      id,
      customerId,
    );
    return { success: true, data: order };
  }

  // –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –æ—Ç–∫–ª–∏–∫
  @Post(':id/reject')
  async rejectResponse(@Req() req: any, @Param('id') id: string) {
    const customerId = req.user.userId;
    const response = await this.orderResponsesService.rejectResponse(
      id,
      customerId,
    );
    return { success: true, data: response };
  }

  // –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –æ—Ç–∑—ã–≤–∞–µ—Ç –æ—Ç–∫–ª–∏–∫
  @Post(':id/withdraw')
  async withdrawResponse(@Req() req: any, @Param('id') id: string) {
    const contractorId = req.user.userId;
    const response = await this.orderResponsesService.withdrawResponse(
      id,
      contractorId,
    );
    return { success: true, data: response };
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫–ª–∏–∫–æ–≤ –Ω–∞ –∑–∞–∫–∞–∑
  @Get('order/:orderId/count')
  async getResponsesCount(@Param('orderId') orderId: string) {
    const count = await this.orderResponsesService.getResponsesCount(orderId);
    return { success: true, data: { count } };
  }
}

