import { Injectable } from '@nestjs/common';
import { Expo, ExpoPushMessage, ExpoPushTicket } from 'expo-server-sdk';

@Injectable()
export class PushService {
  private expo: Expo;

  constructor() {
    this.expo = new Expo();
    console.log('üì≤ Expo Push Notifications service initialized');
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
   * @param pushToken - Expo push token –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param title - –ó–∞–≥–æ–ª–æ–≤–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   * @param body - –¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   * @param data - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
   */
  async sendPushNotification(
    pushToken: string,
    title: string,
    body: string,
    data?: any,
  ): Promise<boolean> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞
    if (!Expo.isExpoPushToken(pushToken)) {
      console.error(`üì≤ Invalid Expo push token: ${pushToken}`);
      return false;
    }

    const message: ExpoPushMessage = {
      to: pushToken,
      sound: 'default',
      title,
      body,
      data: data || {},
      priority: 'high',
      channelId: 'default',
    };

    try {
      const ticketChunk = await this.expo.sendPushNotificationsAsync([message]);
      
      const ticket = ticketChunk[0];
      if (ticket.status === 'error') {
        console.error(`üì≤ Push notification error:`, ticket);
        return false;
      }

      console.log(`üì≤ Push sent successfully to ${pushToken.substring(0, 20)}...`);
      return true;
    } catch (error) {
      console.error('üì≤ Failed to send push notification:', error);
      return false;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
   * @param pushTokens - –ú–∞—Å—Å–∏–≤ Expo push —Ç–æ–∫–µ–Ω–æ–≤
   * @param title - –ó–∞–≥–æ–ª–æ–≤–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   * @param body - –¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   * @param data - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
   */
  async sendPushNotifications(
    pushTokens: string[],
    title: string,
    body: string,
    data?: any,
  ): Promise<{ success: number; failed: number }> {
    const validTokens = pushTokens.filter((token) => Expo.isExpoPushToken(token));

    if (validTokens.length === 0) {
      console.warn('üì≤ No valid push tokens provided');
      return { success: 0, failed: pushTokens.length };
    }

    const messages: ExpoPushMessage[] = validTokens.map((token) => ({
      to: token,
      sound: 'default',
      title,
      body,
      data: data || {},
      priority: 'high',
      channelId: 'default',
    }));

    try {
      // Expo –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥–æ 100 —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ —Ä–∞–∑
      const chunks = this.expo.chunkPushNotifications(messages);
      const tickets: ExpoPushTicket[] = [];

      for (const chunk of chunks) {
        try {
          const ticketChunk = await this.expo.sendPushNotificationsAsync(chunk);
          tickets.push(...ticketChunk);
        } catch (error) {
          console.error('üì≤ Error sending chunk:', error);
        }
      }

      const success = tickets.filter((ticket) => ticket.status === 'ok').length;
      const failed = tickets.filter((ticket) => ticket.status === 'error').length;

      console.log(`üì≤ Push notifications sent: ${success} success, ${failed} failed`);
      return { success, failed };
    } catch (error) {
      console.error('üì≤ Failed to send push notifications:', error);
      return { success: 0, failed: validTokens.length };
    }
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è Expo push token
   */
  isValidPushToken(token: string): boolean {
    return Expo.isExpoPushToken(token);
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏
   */
  async sendInvitationNotification(
    pushToken: string,
    customerName: string,
    orderTitle: string,
    data?: any,
  ): Promise<boolean> {
    return this.sendPushNotification(
      pushToken,
      '–ù–æ–≤–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ',
      `${customerName} –ø—Ä–∏–≥–ª–∞—Å–∏–ª –≤–∞—Å –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: ${orderTitle}`,
      { type: 'invitation', ...data }
    );
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
   */
  async sendInvitationAcceptedNotification(
    pushToken: string,
    contractorName: string,
    orderTitle: string,
    data?: any,
  ): Promise<boolean> {
    return this.sendPushNotification(
      pushToken,
      '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ',
      `${contractorName} –ø—Ä–∏–Ω—è–ª –≤–∞—à–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥–ª—è –∑–∞–∫–∞–∑–∞: ${orderTitle}`,
      { type: 'invitation_accepted', ...data }
    );
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
   */
  async sendInvitationRejectedNotification(
    pushToken: string,
    contractorName: string,
    orderTitle: string,
    reason: string,
    data?: any,
  ): Promise<boolean> {
    return this.sendPushNotification(
      pushToken,
      '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ',
      `${contractorName} –æ—Ç–∫–ª–æ–Ω–∏–ª –≤–∞—à–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ. –ü—Ä–∏—á–∏–Ω–∞: ${reason}`,
      { type: 'invitation_rejected', reason, ...data }
    );
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
   */
  async sendPersonalizedOrderCompletedNotification(
    pushToken: string,
    contractorName: string,
    orderTitle: string,
    data?: any,
  ): Promise<boolean> {
    return this.sendPushNotification(
      pushToken,
      '–ó–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à–µ–Ω',
      `${contractorName} –∑–∞–≤–µ—Ä—à–∏–ª –≤–∞—à –∑–∞–∫–∞–∑: ${orderTitle}. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç—ã.`,
      { type: 'personalized_order_completed', ...data }
    );
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ö–æ–ª–¥–µ –ø–ª–∞—Ç–µ–∂–∞
   */
  async sendPaymentHoldNotification(
    pushToken: string,
    amount: number,
    orderTitle: string,
    data?: any,
  ): Promise<boolean> {
    return this.sendPushNotification(
      pushToken,
      '–ü–ª–∞—Ç–µ–∂ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω',
      `–° –≤–∞—à–µ–π –∫–∞—Ä—Ç—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ —Å—É–º–º–∞ ${amount} —Ä—É–±. –¥–ª—è –∑–∞–∫–∞–∑–∞: ${orderTitle}`,
      { type: 'payment_hold', amount, ...data }
    );
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–ø–∏—Å–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞
   */
  async sendPaymentReleasedNotification(
    pushToken: string,
    amount: number,
    orderTitle: string,
    data?: any,
  ): Promise<boolean> {
    return this.sendPushNotification(
      pushToken,
      '–ü–ª–∞—Ç–µ–∂ —Å–ø–∏—Å–∞–Ω',
      `–° –≤–∞—à–µ–π –∫–∞—Ä—Ç—ã —Å–ø–∏—Å–∞–Ω–∞ —Å—É–º–º–∞ ${amount} —Ä—É–±. –∑–∞ –∑–∞–∫–∞–∑: ${orderTitle}`,
      { type: 'payment_released', amount, ...data }
    );
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã
   */
  async sendPaymentReceivedNotification(
    pushToken: string,
    amount: number,
    orderTitle: string,
    data?: any,
  ): Promise<boolean> {
    return this.sendPushNotification(
      pushToken,
      '–û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞',
      `–í—ã –ø–æ–ª—É—á–∏–ª–∏ –æ–ø–ª–∞—Ç—É ${amount} —Ä—É–±. –∑–∞ –∑–∞–∫–∞–∑: ${orderTitle}`,
      { type: 'payment_received', amount, ...data }
    );
  }
}

