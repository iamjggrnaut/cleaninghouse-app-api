import { Injectable } from '@nestjs/common';
import { Expo, ExpoPushMessage, ExpoPushTicket } from 'expo-server-sdk';

@Injectable()
export class PushService {
  private expo: Expo;

  constructor() {
    this.expo = new Expo();
    console.log('üì≤ Expo Push Notifications service initialized');
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
   * @param pushToken - Expo push token –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param title - –ó–∞–≥–æ–ª–æ–≤–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   * @param body - –¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   * @param data - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
   */
  async sendPushNotification(
    pushToken: string,
    title: string,
    body: string,
    data?: any,
  ): Promise<boolean> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞
    if (!Expo.isExpoPushToken(pushToken)) {
      console.error(`üì≤ Invalid Expo push token: ${pushToken}`);
      return false;
    }

    const message: ExpoPushMessage = {
      to: pushToken,
      sound: 'default',
      title,
      body,
      data: data || {},
      priority: 'high',
      channelId: 'default',
    };

    try {
      const ticketChunk = await this.expo.sendPushNotificationsAsync([message]);
      
      const ticket = ticketChunk[0];
      if (ticket.status === 'error') {
        console.error(`üì≤ Push notification error:`, ticket);
        return false;
      }

      console.log(`üì≤ Push sent successfully to ${pushToken.substring(0, 20)}...`);
      return true;
    } catch (error) {
      console.error('üì≤ Failed to send push notification:', error);
      return false;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
   * @param pushTokens - –ú–∞—Å—Å–∏–≤ Expo push —Ç–æ–∫–µ–Ω–æ–≤
   * @param title - –ó–∞–≥–æ–ª–æ–≤–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   * @param body - –¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   * @param data - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
   */
  async sendPushNotifications(
    pushTokens: string[],
    title: string,
    body: string,
    data?: any,
  ): Promise<{ success: number; failed: number }> {
    const validTokens = pushTokens.filter((token) => Expo.isExpoPushToken(token));

    if (validTokens.length === 0) {
      console.warn('üì≤ No valid push tokens provided');
      return { success: 0, failed: pushTokens.length };
    }

    const messages: ExpoPushMessage[] = validTokens.map((token) => ({
      to: token,
      sound: 'default',
      title,
      body,
      data: data || {},
      priority: 'high',
      channelId: 'default',
    }));

    try {
      // Expo –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥–æ 100 —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ —Ä–∞–∑
      const chunks = this.expo.chunkPushNotifications(messages);
      const tickets: ExpoPushTicket[] = [];

      for (const chunk of chunks) {
        try {
          const ticketChunk = await this.expo.sendPushNotificationsAsync(chunk);
          tickets.push(...ticketChunk);
        } catch (error) {
          console.error('üì≤ Error sending chunk:', error);
        }
      }

      const success = tickets.filter((ticket) => ticket.status === 'ok').length;
      const failed = tickets.filter((ticket) => ticket.status === 'error').length;

      console.log(`üì≤ Push notifications sent: ${success} success, ${failed} failed`);
      return { success, failed };
    } catch (error) {
      console.error('üì≤ Failed to send push notifications:', error);
      return { success: 0, failed: validTokens.length };
    }
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è Expo push token
   */
  isValidPushToken(token: string): boolean {
    return Expo.isExpoPushToken(token);
  }
}

